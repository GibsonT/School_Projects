.....................................
.   Travis Gibson
.   n00921652
.   COP3601
.   Project 2
.....................................

        START   100
        J       BEGIN

INPUT   BYTE    X'F2'       .INPUT FILE TO READ
INTS    RESW    10          .CAN HAVE UP TO 100 INTS IMPORTED FROM FILE
TINTS   WORD    0           .TOTAL NUMBER OF INTS IN INPUT FILE
PARIN   RESW    10          .10 WORDS RESERVED FOR PARSING INPUT
ENDLP   WORD    30          .X SHOULDN'T SURPASS THIS AMOUNT WHEN PARSING LINE
CHARCNT WORD    0           .NUMBER OF CHARS IN LINE
LF      WORD    10          .ASCII FOR LINE FEED
PERIOD  WORD    46          .ASCII FOR PERIOD (EOL INDICATOR)
TERM    WORD    0           .TERM FOR A DIGIT OF A LINE
ADIGIT  WORD    0           .ASCII VALUE OF CHARACTER IN LINE
LINEPOS WORD    0           .LINE CHAR POSITION WHILE CONVERTING
TEMP    WORD    0           .TEMPORARY STORE USED FOR FLIPPING
SWAPEND WORD    0           .END MARKER FOR SWAPPING
SWAPST  WORD    0           .BEGINNING MARKER FOR SWAPPING
SWAPS   WORD    0           .NUMBER OF SWAPS TO PERFORM


..........
. ASCII VALUES FOR DIGITS 0-9 
..........
AZERO   WORD    48
AONE    WORD    49
ATWO    WORD    50
ATHREE  WORD    51
AFOUR   WORD    52
AFIVE   WORD    53
ASIX    WORD    54
ASEVEN  WORD    55
AEIGHT  WORD    56
ANINE   WORD    57

BEGIN   LDX     #0          .SET INDEX TO 0
        LDS     #0          .SET LINE CHARACTER COUNT TO 0
        LDA     #0          .SET A TO 0

..........
. BEGIN READING INPUT FILE
..........
READ    TD      INPUT       .TEST IF INPUT DEVICE IS READY
        JEQ     READ        .CONTINUE LOOPING UNTIL INPUT DEVICE IS READY
        RD      INPUT       .READ BYTE FROM INPUT

        COMP    LF          .IS INPUT BYTE A LINE FEED?
        JEQ     INCTINT     .DONE READING LINE, CONVERT PARIN TO NUMBER

        COMP    PERIOD      .IS INPUT BYTE A PERIOD?
        JEQ     REVERSE     .WE'RE DONE WITH THE FILE! BEGIN REVERSING THE LIST
        
        STA     PARIN,X     .STORE READ WORD INTO PARIN[X]
        LDA     #1
        ADDR    A,S         .INCREMENT LINE CHARACTER COUNT BY 1
        STS     CHARCNT     .STORE S IN CHARCNT
        TIX     ENDLP       .INCREMENT X BY 3 (PROBABLY BETTER WAY TO DO THIS, BUT IT WORKS FOR NOW)
        TIX     ENDLP
        TIX     ENDLP
        JLT     READ        .READ NEXT CHARACTER IN LINE

. INITIALIZATION FOR CONVERTING LINE
INCTINT LDA     TINTS       .LOAD TINTS INTO A
        ADD     #1          .ADD 1 TO A
        STA     TINTS       .STORE NEW VALUE INTO A
        SUB     #1          .SUBTRACT A BY 1 
        MUL     #3          .MULTIPLY BY ONE FOR PROPER OFFSET
        RMO     A,X         .LOAD A INTO X (TINTS - 1)
        LDA     INTS,X      .LOAD INTS[X] INTO A
        ADD     #1          .ADD 1 TO A (UNINITIALIZED VALUES START AT -1)
        STA     INTS,X      .STORE VALUE BACK INTO INTS[X]
        LDX     #0          .INITIALIZE X TO 0
        LDA     #0          .LOAD 0 INTO A
        STA     LINEPOS     .STORE 0 INTO LINEPOS, CLEARING IT OUT

CONVERT LDA     CHARCNT     .PLACE CHAR COUNT IN A
        SUB     #1          .DECREASE CHAR COUNT BY 1
        STA     CHARCNT     .PLACE BACK INTO CHARCNT
        LDS     CHARCNT     .LOAD CHARCNT INTO S
        COMP    #0          .IS A LESS THAN 0?
        JLT     BEGIN       .DONE CONVERTING NUMBER, START READING NEXT LINE
        LDA     PARIN,X     .COPY PARIN[X] INTO A
       
..........
. COMPARE AND ASSIGN DIGITS BASED ON ASCII VALUES
..........
        COMP    AZERO
        JEQ     ISZERO
        COMP    AONE
        JEQ     ISONE
        COMP    ATWO
        JEQ     ISTWO
        COMP    ATHREE
        JEQ     ISTHREE
        COMP    AFOUR
        JEQ     ISFOUR
        COMP    AFIVE
        JEQ     ISFIVE
        COMP    ASIX
        JEQ     ISSIX
        COMP    ASEVEN
        JEQ     ISSEVEN
        COMP    AEIGHT
        JEQ     ISEIGHT
        COMP    ANINE
        JEQ     ISNINE

ISZERO  LDA     #0
        J       MULTI
ISONE   LDA     #1
        J       MULTI
ISTWO   LDA     #2
        J       MULTI
ISTHREE LDA     #3
        J       MULTI
ISFOUR  LDA     #4
        J       MULTI
ISFIVE  LDA     #5
        J       MULTI
ISSIX   LDA     #6
        J       MULTI
ISSEVEN LDA     #7
        J       MULTI
ISEIGHT LDA     #8
        J       MULTI
ISNINE  LDA     #9
        J       MULTI

..........
. CALCULATE VALUE BASED ON DIGIT POSITION
..........

MULTI   STA     TERM    .STORE DIGIT IN A INTO TERM

. MULTIPLIES NUMBER A SET NUMBER OF TIMES BASED ON POSITION
EXPON   LDA     CHARCNT .LOAD STORED CHAR COUNT INTO A
        COMP    #0      .IS THE CHARCNT DOWN TO ZERO?
        JEQ     ADDDIGI .JUMP TO ADDDIGI

        SUB     #1      .SUBTRACT 1 FROM A
        STA     CHARCNT .STORE NEW CHAR COUNT
        LDA     TERM    .BRING TERM BACK INTO A
        MUL     #10     .MULTIPLY A BY 10
        STA     TERM    .PLACE A BACK INTO TERM
        J       EXPON   .JUMP BACK UP AND MULTIPLY AGAIN

. ADDS CALCULATED VALUE INTO INT POSITION
ADDDIGI LDA     TINTS   .LOAD TINTS INTO A
        SUB     #1      .SUBTRACT BY 1
        MUL     #3      .MULTIPLY BY 3 FOR PROPER OFFSET
        RMO     A,X     .MOVE VALUE INTO X
        LDA     TERM    .BRING FINAL TERM BACK
        ADD     INTS,X  .ADD A INTO INTS[X]
        STA     INTS,X  .STORE A INTO INTS[X]
        STS     CHARCNT .PLACE S INTO CHARCNT
        LDA     LINEPOS .LOAD CURRENT LINE POSITION INTO A
        ADD     #3      .INCREMENT BY THREE
        STA     LINEPOS .STORE BACK INTO LINEPOS
        LDX     LINEPOS .LOAD VALUE INTO X
        J       CONVERT .CONVERT THE NEXT DIGIT

..........
. REVERSE THE INT LIST
..........
REVERSE LDA     TINTS   .LOAD TINTS INTO A
        DIV     #2      .DIVIDE BY TWO
        STA     SWAPS   .STORE RESULT INTO SWAPS
        LDA     TINTS   .LOAD TOTAL NUMBER OF INTS AGAIN
        SUB     #1      .SUBTRACT BY ONE...
        MUL     #3      . ...AND MULTIPLY BY 3 TO USE
        STA     SWAPEND .STORE THE VALUE FOR THE END POSITION

. MAIN SWAPPING FUNCTION
SWAP    LDX     SWAPST  .LOAD START POSITION INTO X
        LDA     INTS,X  .LOAD START INT[X] VALUE INTO A
        STA     TEMP    .STORE A INTO TEMP WORD
        LDX     SWAPEND .LOAD END POSITION INTO X
        LDA     INTS,X  .LOAD END INT[X] VALUE INTO A
        LDX     SWAPST  .LOAD START POSITION INTO X AGAIN
        STA     INTS,X  .STORE  END INT[X] VALUE INTO FRONT
        LDA     TEMP    .LOAD VALUE STORED IN TEMP INTO A
        LDX     SWAPEND .LOAD END POSITION BACK INTO X
        STA     INTS,X  .FINALLY, STORE TEMP VALUE INTO THE END POSITION

        LDA     SWAPS   .LOAD NUMBER OF SWAPS
        SUB     #1      .SUBTRACT BY ONE
        STA     SWAPS   .STORE NEW VALUE BACK INTO SWAPS
        LDA     SWAPST  .LOAD START POSITION...
        ADD     #3      . ...AND MOVE IT TOWARD THE END
        STA     SWAPST  .SAVE IT BACK INTO SWAPST
        LDA     SWAPEND .LOAD END POSITION...
        SUB     #3      . ...AND MOVE IT TOWARD THE FRONT
        STA     SWAPEND .SAVE IT BACK INTO SWAPEND

        LDA     SWAPS   .LOAD SWAPS VALUE AGAIN
        COMP    #0      .IS IT ZERO?
        JGT     SWAP    .IF IT'S NOT, CONTINUE SWAPPING. OTHERWISE, WE'RE DONE! HORRAY!

DONE    RSUB
        END
